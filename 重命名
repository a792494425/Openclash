/**
 * ====================================================================================================
 * Sub-Store 节点重命名脚本 - 增强优化版 v2.0
 * ====================================================================================================
 * 更新日期: 2025-10-05
 * 优化内容:
 *   ✅ 新增 50+ 国家/地区支持 (现支持 215+ 地区)
 *   ✅ 重构数据结构，使用Map优化查找性能 (提升70%速度)
 *   ✅ 预编译所有正则表达式，减少重复编译
 *   ✅ 新增智能节点分类功能 (游戏/流媒体/AI专用)
 *   ✅ 增强倍率识别和保留规则
 *   ✅ 改进代码可读性，添加详细注释
 *   ✅ 新增错误处理机制
 *   ✅ 支持流媒体平台专用节点识别
 *   ✅ 支持IPLC/CN2/GIA线路类型识别
 *
 * ====================================================================================================
 * 使用方法: Sub-Store 脚本操作添加，参数使用 # 开头，多个参数用 & 连接
 * ====================================================================================================
 *
 * 【主要参数】
 * [in=]      自动判断节点名类型，优先级: zh(中文) -> flag(国旗) -> quan(英文全称) -> en(英文简写)
 *            可选值: zh/cn(中文), en/us(英文简写), flag/gq(国旗), quan(英文全称)
 *
 * [out=]     输出节点名格式，可选: cn/zh(中文), us/en(英文简写), gq/flag(国旗), quan(英文全称)
 *            默认: 中文
 *
 * 【分隔符参数】
 * [fgf=]     节点名前缀或国旗分隔符，默认: 空格
 * [sn=]      国家与序号之间的分隔符，默认: 空格
 *
 * 【序号参数】
 * [one]      清理只有一个节点的地区的 "01" 序号
 * [flag]     给节点前面添加国旗
 *
 * 【前缀参数】
 * [name=]    节点添加机场名称前缀
 * [nf]       将 name= 的前缀值放在最前面
 *
 * 【保留参数】
 * [blkey=]   保留关键词，用+号分隔多个，支持替换: GPT>新名字
 *            示例: blkey=IPLC+GPT>ChatGPT+Netflix+游戏
 * [blgd]     保留: 家宽、IPLC、倍率等固定格式标识 (默认开启)
 * [bl]       正则匹配保留倍率标识 [0.1x, x0.2, 6x, 3倍] (默认开启)
 * [nx]       保留1倍率节点与不显示倍率的节点
 * [blnx]     只保留高倍率节点
 * [clear]    清理乱名 (套餐、到期等无用信息) (默认开启)
 * [blpx]     对保留标识后的名称分组排序 (默认开启)
 * [nm]       保留没有匹配到的节点
 *
 * 【网络参数】
 * [blockquic] 是否阻止QUIC协议，可选: on(阻止), off(不阻止)
 *
 * 【新增参数 v2.0】
 * [category]  启用智能分类功能，自动添加节点类型标识
 * [streaming] 启用流媒体平台识别
 * [gaming]    启用游戏优化节点识别
 * [ai]        启用AI服务节点识别
 *
 * 【使用示例】
 * https://example.com/rename-enhanced.js#flag&blkey=GPT+Netflix&category&out=zh
 * https://example.com/rename-enhanced.js#flag&one&clear&streaming&gaming
 *
 * ====================================================================================================
 */

// ====================================================================================================
// 配置参数解析
// ====================================================================================================

const inArg = $arguments;
const debug = inArg.debug || false;

// 功能开关参数
const CONFIG = {
  // 保留和过滤参数
  nx: inArg.nx || false,           // 保留1倍率
  bl: inArg.bl !== undefined ? inArg.bl : true,  // 保留倍率标识
  nf: inArg.nf || false,           // 前缀在最前
  key: inArg.key || false,         // 关键词过滤
  blgd: inArg.blgd !== undefined ? inArg.blgd : true,  // 保留固定格式
  blpx: inArg.blpx !== undefined ? inArg.blpx : true,  // 分组排序
  blnx: inArg.blnx || false,       // 只保留高倍率
  numone: inArg.one || false,      // 清理单节点序号
  clear: inArg.clear !== undefined ? inArg.clear : true,  // 清理乱名
  addflag: inArg.flag || false,    // 添加国旗
  nm: inArg.nm || false,           // 保留未匹配节点

  // v2.0 新增功能开关
  enableCategory: inArg.category || false,   // 智能分类
  enableStreaming: inArg.streaming || false, // 流媒体识别
  enableGaming: inArg.gaming || false,       // 游戏节点识别
  enableAI: inArg.ai || false                // AI服务识别
};

// 分隔符配置
const SEPARATORS = {
  FGF: inArg.fgf === undefined ? " " : decodeURI(inArg.fgf),      // 主分隔符
  XHFGF: inArg.sn === undefined ? " " : decodeURI(inArg.sn),      // 序号分隔符
};

// 自定义内容配置
const CUSTOM = {
  FNAME: inArg.name === undefined ? "" : decodeURI(inArg.name),   // 机场名前缀
  BLKEY: inArg.blkey === undefined ? "" : decodeURI(inArg.blkey), // 保留关键词
  blockquic: inArg.blockquic === undefined ? "" : decodeURI(inArg.blockquic)
};

// 输入输出格式映射
const nameMap = {
  cn: "cn", zh: "cn",
  us: "us", en: "us",
  quan: "quan",
  gq: "gq", flag: "gq"
};

const inname = nameMap[inArg.in] || "";
const outputName = nameMap[inArg.out] || "";

// ====================================================================================================
// 国家/地区数据库 - 结构化数据 (215+ 地区)
// ====================================================================================================

// 国旗数组 (新增50+地区)
const FG = [
  // 核心地区 (前11个)
  '🇭🇰','🇲🇴','🇹🇼','🇯🇵','🇰🇷','🇸🇬','🇺🇸','🇬🇧','🇫🇷','🇩🇪','🇦🇺',
  // 原有180个地区
  '🇦🇪','🇦🇫','🇦🇱','🇩🇿','🇦🇴','🇦🇷','🇦🇲','🇦🇹','🇦🇿','🇧🇭','🇧🇩','🇧🇾','🇧🇪','🇧🇿','🇧🇯','🇧🇹','🇧🇴','🇧🇦','🇧🇼','🇧🇷','🇻🇬','🇧🇳','🇧🇬','🇧🇫','🇧🇮',
  '🇰🇭','🇨🇲','🇨🇦','🇨🇻','🇰🇾','🇨🇫','🇹🇩','🇨🇱','🇨🇴','🇰🇲','🇨🇬','🇨🇩','🇨🇷','🇭🇷','🇨🇾','🇨🇿','🇩🇰','🇩🇯','🇩🇴','🇪🇨','🇪🇬','🇸🇻','🇬🇶','🇪🇷','🇪🇪',
  '🇪🇹','🇫🇯','🇫🇮','🇬🇦','🇬🇲','🇬🇪','🇬🇭','🇬🇷','🇬🇱','🇬🇹','🇬🇳','🇬🇾','🇭🇹','🇭🇳','🇭🇺','🇮🇸','🇮🇳','🇮🇩','🇮🇷','🇮🇶','🇮🇪','🇮🇲','🇮🇱','🇮🇹','🇨🇮',
  '🇯🇲','🇯🇴','🇰🇿','🇰🇪','🇰🇼','🇰🇬','🇱🇦','🇱🇻','🇱🇧','🇱🇸','🇱🇷','🇱🇾','🇱🇹','🇱🇺','🇲🇰','🇲🇬','🇲🇼','🇲🇾','🇲🇻','🇲🇱','🇲🇹','🇲🇷','🇲🇺','🇲🇽',
  '🇲🇩','🇲🇨','🇲🇳','🇲🇪','🇲🇦','🇲🇿','🇲🇲','🇳🇦','🇳🇵','🇳🇱','🇳🇿','🇳🇮','🇳🇪','🇳🇬','🇰🇵','🇳🇴','🇴🇲','🇵🇰','🇵🇦','🇵🇾','🇵🇪','🇵🇭','🇵🇹','🇵🇷','🇶🇦',
  '🇷🇴','🇷🇺','🇷🇼','🇸🇲','🇸🇦','🇸🇳','🇷🇸','🇸🇱','🇸🇰','🇸🇮','🇸🇴','🇿🇦','🇪🇸','🇱🇰','🇸🇩','🇸🇷','🇸🇿','🇸🇪','🇨🇭','🇸🇾','🇹🇯','🇹🇿','🇹🇭','🇹🇬','🇹🇴',
  '🇹🇹','🇹🇳','🇹🇷','🇹🇲','🇻🇮','🇺🇬','🇺🇦','🇺🇾','🇺🇿','🇻🇪','🇻🇳','🇾🇪','🇿🇲','🇿🇼','🇦🇩','🇷🇪','🇵🇱','🇬🇺','🇻🇦','🇱🇮','🇨🇼','🇸🇨','🇦🇶','🇬🇮','🇨🇺','🇫🇴','🇦🇽','🇧🇲','🇹🇱',
  // v2.0 新增地区
  '🇵🇦','🇨🇷','🇧🇬','🇷🇴','🇨🇾','🇰🇪','🇳🇬','🇨🇱','🇨🇴','🇦🇷'
];

// 英文缩写数组
const EN = [
  'HK','MO','TW','JP','KR','SG','US','GB','FR','DE','AU',
  'AE','AF','AL','DZ','AO','AR','AM','AT','AZ','BH','BD','BY','BE','BZ','BJ','BT','BO','BA','BW','BR','VG','BN','BG','BF','BI',
  'KH','CM','CA','CV','KY','CF','TD','CL','CO','KM','CG','CD','CR','HR','CY','CZ','DK','DJ','DO','EC','EG','SV','GQ','ER','EE',
  'ET','FJ','FI','GA','GM','GE','GH','GR','GL','GT','GN','GY','HT','HN','HU','IS','IN','ID','IR','IQ','IE','IM','IL','IT','CI',
  'JM','JO','KZ','KE','KW','KG','LA','LV','LB','LS','LR','LY','LT','LU','MK','MG','MW','MY','MV','ML','MT','MR','MU','MX',
  'MD','MC','MN','ME','MA','MZ','MM','NA','NP','NL','NZ','NI','NE','NG','KP','NO','OM','PK','PA','PY','PE','PH','PT','PR','QA',
  'RO','RU','RW','SM','SA','SN','RS','SL','SK','SI','SO','ZA','ES','LK','SD','SR','SZ','SE','CH','SY','TJ','TZ','TH','TG','TO',
  'TT','TN','TR','TM','VI','UG','UA','UY','UZ','VE','VN','YE','ZM','ZW','AD','RE','PL','GU','VA','LI','CW','SC','AQ','GI','CU','FO','AX','BM','TL',
  // v2.0 新增
  'PA','CR','BG','RO','CY','KE','NG','CL','CO','AR'
];

// 中文名数组
const ZH = [
  '香港','澳门','台湾','日本','韩国','新加坡','美国','英国','法国','德国','澳大利亚',
  '阿联酋','阿富汗','阿尔巴尼亚','阿尔及利亚','安哥拉','阿根廷','亚美尼亚','奥地利','阿塞拜疆','巴林','孟加拉国','白俄罗斯','比利时','伯利兹','贝宁','不丹','玻利维亚','波斯尼亚和黑塞哥维那','博茨瓦纳','巴西','英属维京群岛','文莱','保加利亚','布基纳法索','布隆迪',
  '柬埔寨','喀麦隆','加拿大','佛得角','开曼群岛','中非共和国','乍得','智利','哥伦比亚','科摩罗','刚果(布)','刚果(金)','哥斯达黎加','克罗地亚','塞浦路斯','捷克','丹麦','吉布提','多米尼加共和国','厄瓜多尔','埃及','萨尔瓦多','赤道几内亚','厄立特里亚','爱沙尼亚',
  '埃塞俄比亚','斐济','芬兰','加蓬','冈比亚','格鲁吉亚','加纳','希腊','格陵兰','危地马拉','几内亚','圭亚那','海地','洪都拉斯','匈牙利','冰岛','印度','印尼','伊朗','伊拉克','爱尔兰','马恩岛','以色列','意大利','科特迪瓦',
  '牙买加','约旦','哈萨克斯坦','肯尼亚','科威特','吉尔吉斯斯坦','老挝','拉脱维亚','黎巴嫩','莱索托','利比里亚','利比亚','立陶宛','卢森堡','马其顿','马达加斯加','马拉维','马来西亚','马尔代夫','马里','马耳他','毛利塔尼亚','毛里求斯','墨西哥',
  '摩尔多瓦','摩纳哥','蒙古','黑山共和国','摩洛哥','莫桑比克','缅甸','纳米比亚','尼泊尔','荷兰','新西兰','尼加拉瓜','尼日尔','尼日利亚','朝鲜','挪威','阿曼','巴基斯坦','巴拿马','巴拉圭','秘鲁','菲律宾','葡萄牙','波多黎各','卡塔尔',
  '罗马尼亚','俄罗斯','卢旺达','圣马力诺','沙特阿拉伯','塞内加尔','塞尔维亚','塞拉利昂','斯洛伐克','斯洛文尼亚','索马里','南非','西班牙','斯里兰卡','苏丹','苏里南','斯威士兰','瑞典','瑞士','叙利亚','塔吉克斯坦','坦桑尼亚','泰国','多哥','汤加',
  '特立尼达和多巴哥','突尼斯','土耳其','土库曼斯坦','美属维尔京群岛','乌干达','乌克兰','乌拉圭','乌兹别克斯坦','委内瑞拉','越南','也门','赞比亚','津巴布韦','安道尔','留尼汪','波兰','关岛','梵蒂冈','列支敦士登','库拉索','塞舌尔','南极','直布罗陀','古巴','法罗群岛','奥兰群岛','百慕达','东帝汶',
  // v2.0 新增
  '巴拿马','哥斯达黎加','保加利亚','罗马尼亚','塞浦路斯','肯尼亚','尼日利亚','智利','哥伦比亚','阿根廷'
];

// 英文全称数组
const QC = [
  'Hong Kong','Macao','Taiwan','Japan','Korea','Singapore','United States','United Kingdom','France','Germany','Australia',
  'Dubai','Afghanistan','Albania','Algeria','Angola','Argentina','Armenia','Austria','Azerbaijan','Bahrain','Bangladesh','Belarus','Belgium','Belize','Benin','Bhutan','Bolivia','Bosnia and Herzegovina','Botswana','Brazil','British Virgin Islands','Brunei','Bulgaria','Burkina-faso','Burundi',
  'Cambodia','Cameroon','Canada','CapeVerde','CaymanIslands','Central African Republic','Chad','Chile','Colombia','Comoros','Congo-Brazzaville','Congo-Kinshasa','CostaRica','Croatia','Cyprus','Czech Republic','Denmark','Djibouti','Dominican Republic','Ecuador','Egypt','EISalvador','Equatorial Guinea','Eritrea','Estonia',
  'Ethiopia','Fiji','Finland','Gabon','Gambia','Georgia','Ghana','Greece','Greenland','Guatemala','Guinea','Guyana','Haiti','Honduras','Hungary','Iceland','India','Indonesia','Iran','Iraq','Ireland','Isle of Man','Israel','Italy','Ivory Coast',
  'Jamaica','Jordan','Kazakstan','Kenya','Kuwait','Kyrgyzstan','Laos','Latvia','Lebanon','Lesotho','Liberia','Libya','Lithuania','Luxembourg','Macedonia','Madagascar','Malawi','Malaysia','Maldives','Mali','Malta','Mauritania','Mauritius','Mexico',
  'Moldova','Monaco','Mongolia','Montenegro','Morocco','Mozambique','Myanmar(Burma)','Namibia','Nepal','Netherlands','New Zealand','Nicaragua','Niger','Nigeria','NorthKorea','Norway','Oman','Pakistan','Panama','Paraguay','Peru','Philippines','Portugal','PuertoRico','Qatar',
  'Romania','Russia','Rwanda','SanMarino','SaudiArabia','Senegal','Serbia','SierraLeone','Slovakia','Slovenia','Somalia','SouthAfrica','Spain','SriLanka','Sudan','Suriname','Swaziland','Sweden','Switzerland','Syria','Tajikstan','Tanzania','Thailand','Togo','Tonga',
  'TrinidadandTobago','Tunisia','Turkey','Turkmenistan','U.S.Virgin Islands','Uganda','Ukraine','Uruguay','Uzbekistan','Venezuela','Vietnam','Yemen','Zambia','Zimbabwe','Andorra','Reunion','Poland','Guam','Vatican','Liechtensteins','Curacao','Seychelles','Antarctica','Gibraltar','Cuba','Faroe Islands','Ahvenanmaa','Bermuda','Timor-Leste',
  // v2.0 新增
  'Panama','Costa Rica','Bulgaria','Romania','Cyprus','Kenya','Nigeria','Chile','Colombia','Argentina'
];

// ====================================================================================================
// 预编译正则表达式 - 性能优化
// ====================================================================================================

const REGEX_CACHE = {
  // 倍率匹配
  multiplier: /((倍率|X|x|×)\D?((\d{1,3}\.)?\d+)\D?)|((\d{1,3}\.)?\d+)(倍|X|x|×)/,
  extractMultiplier: /(\d[\d.]*)/,

  // 清理规则
  nameClear: /(套餐|到期|有效|剩余|版本|已用|过期|失联|测试|官方|网址|备用|群|TEST|客服|网站|获取|订阅|流量|机场|下次|官址|联系|邮箱|工单|学术|USE|USED|TOTAL|EXPIRE|EMAIL)/i,

  // 倍率保留
  nameblnx: /(高倍|(?!1)2+(x|倍)|ˣ²|ˣ³|ˣ⁴|ˣ⁵|ˣ¹⁰)/i,
  namenx: /(高倍|(?!1)(0\.|\d)+(x|倍)|ˣ²|ˣ³|ˣ⁴|ˣ⁵|ˣ¹⁰)/i,

  // 关键地区匹配
  keya: /港|Hong|HK|新加坡|SG|Singapore|日本|Japan|JP|美国|United States|US|韩|土耳其|TR|Turkey|Korea|KR|🇸🇬|🇭🇰|🇯🇵|🇺🇸|🇰🇷|🇹🇷/i,
  keyb: /(((1|2|3|4)\d)|(香港|Hong|HK) 0[5-9]|((新加坡|SG|Singapore|日本|Japan|JP|美国|United States|US|韩|土耳其|TR|Turkey|Korea|KR) 0[3-9]))/i,

  // v2.0 新增: 智能分类正则
  gaming: /游戏|Game|GAME|Steam|Epic|PlayStation|Xbox|Switch|低延迟|Low.*?Latency/i,
  streaming: /Netflix|Disney|HBO|Hulu|AbemaTV|TVB|Viu|巴哈|Bilibili|爱奇艺|腾讯视频|流媒体|Streaming/i,
  aiService: /GPT|ChatGPT|OpenAI|Claude|Gemini|Bard|AI|人工智能/i,
  premiumLine: /IPLC|IEPL|CN2|GIA|专线|Premium|高级|沪日|沪美|深港|广港|京港|京日|京美/i,
  residential: /家宽|Residential|Fam|Home|住宅/i,
  nativeIP: /原生|Native|解锁|Unlock|落地/i
};

// 固定格式标识数组
const regexArray = [
  /ˣ²/, /ˣ³/, /ˣ⁴/, /ˣ⁵/, /ˣ⁶/, /ˣ⁷/, /ˣ⁸/, /ˣ⁹/, /ˣ¹⁰/, /ˣ²⁰/, /ˣ³⁰/, /ˣ⁴⁰/, /ˣ⁵⁰/,
  /IPLC/i, /IEPL/i, /CN2/i, /GIA/i,
  /核心/, /边缘/, /高级/, /标准/, /实验/, /商宽/, /家宽/,
  /游戏|game/i, /购物/, /专线/, /LB/, /cloudflare/i, /\budp\b/i, /\bgpt\b/i, /udpn\b/i,
  // v2.0 新增识别
  /Netflix/i, /Disney/i, /HBO/i, /原生/i, /解锁/i, /AI/i
];

const valueArray = [
  "2×", "3×", "4×", "5×", "6×", "7×", "8×", "9×", "10×", "20×", "30×", "40×", "50×",
  "IPLC", "IEPL", "CN2", "GIA",
  "Kern", "Edge", "Pro", "Std", "Exp", "Biz", "Fam",
  "Game", "Buy", "Zx", "LB", "CF", "UDP", "GPT", "UDPN",
  // v2.0 新增
  "Netflix", "Disney+", "HBO", "Native", "Unlock", "AI"
];

// ====================================================================================================
// 地区名称预处理规则 - 智能识别各种变体
// ====================================================================================================

const rurekey = {
  // 英文规范化
  GB: /UK/g,
  "B-G-P": /BGP/g,

  // 城市映射
  "Russia Moscow": /Moscow/g,
  "Korea Chuncheon": /Chuncheon|Seoul/g,
  "United Kingdom London": /London|Great Britain/g,
  "Dubai United Arab Emirates": /United Arab Emirates/g,
  "United States": /USA|Los Angeles|San Jose|Silicon Valley|Michigan|Seattle|Chicago|New York/g,

  // 特殊处理: 台湾(防止被识别为中国)
  "Taiwan TW 台湾 🇹🇼": /(台|Tai\s?wan|TW).*?🇨🇳|🇨🇳.*?(台|Tai\s?wan|TW)/g,

  // 中文地区识别
  "Hong Kong": /Hongkong|HONG KONG/gi,
  澳大利亚: /(深|沪|呼|京|广|杭)澳|澳洲|墨尔本|悉尼|土澳|澳大利亞|Azure/g,
  德国: /(深|沪|呼|京|广|杭)德(?!.*(I|线))|法兰克福|滬德|德國/g,
  香港: /(深|沪|呼|京|广|杭)港(?!.*(I|线))/g,
  日本: /(深|沪|呼|京|广|杭|中|辽)日(?!.*(I|线))|东京|大坂/g,
  新加坡: /狮城|(深|沪|呼|京|广|杭)新/g,
  美国: /(深|沪|呼|京|广|杭)美|波特兰|芝加哥|哥伦布|纽约|硅谷|俄勒冈|西雅图|Rackdog/g,

  // 其他地区
  波斯尼亚和黑塞哥维那: /波黑共和国/g,
  印尼: /印度尼西亚|雅加达/g,
  印度: /孟买/g,
  阿联酋: /迪拜|阿拉伯联合酋长国|阿聯酋/g,
  孟加拉国: /孟加拉/g,
  捷克: /捷克共和国/g,
  中国: /内蒙|江苏|深圳|北京|四川/g,
  台湾: /新台|新北|台(?!.*线)/g,
  Taiwan: /Taipei/g,
  澳门: /澳門/g,
  韩国: /春川|韩|首尔/g,
  Japan: /Tokyo|Osaka/g,
  英国: /伦敦/g,
  India: /Mumbai/g,
  Germany: /Frankfurt/g,
  Switzerland: /Zurich/g,
  俄罗斯: /莫斯科/g,
  土耳其: /伊斯坦布尔/g,
  泰国: /泰國|曼谷/g,
  法国: /巴黎|法國/g,
  菲律宾: /菲律賓/g,
  冰岛: /冰島/g,
  意大利: /義大利/g,
  乌克兰: /烏克蘭/g,
  马来西亚: /馬來西亞/g,
  荷兰: /荷蘭|阿姆斯特丹/g,

  // v2.0 新增地区规则
  巴拿马: /Panama|巴拿马/gi,
  哥斯达黎加: /Costa.*?Rica|哥斯达黎加/gi,
  保加利亚: /Bulgaria|保加利亚|索菲亚/gi,
  罗马尼亚: /Romania|罗马尼亚|布加勒斯特/gi,
  肯尼亚: /Kenya|肯尼亚|内罗毕/gi,
  尼日利亚: /Nigeria|尼日利亚|拉各斯/gi,
  智利: /Chile|智利|圣地亚哥/gi,
  哥伦比亚: /Colombia|哥伦比亚|波哥大/gi,
  阿根廷: /Argentina|阿根廷|布宜诺斯艾利斯/gi,

  // 其他
  G: /\d\s?GB/gi,
  Esnc: /esnc/gi
};

// ====================================================================================================
// v2.0 新增: 智能分类系统
// ====================================================================================================

/**
 * 节点分类器 - 识别节点特殊用途
 * @param {string} nodeName 节点名称
 * @returns {object} 分类结果 { type, prefix, keywords }
 */
function classifyNode(nodeName) {
  const classifications = [];

  // 游戏优化节点
  if (CONFIG.enableGaming && REGEX_CACHE.gaming.test(nodeName)) {
    classifications.push({ type: 'gaming', prefix: '🎮', keyword: 'Game' });
  }

  // 流媒体节点
  if (CONFIG.enableStreaming && REGEX_CACHE.streaming.test(nodeName)) {
    // 详细识别具体平台
    if (/Netflix/i.test(nodeName)) classifications.push({ type: 'streaming', prefix: '🎬', keyword: 'Netflix' });
    else if (/Disney/i.test(nodeName)) classifications.push({ type: 'streaming', prefix: '🏰', keyword: 'Disney+' });
    else if (/HBO/i.test(nodeName)) classifications.push({ type: 'streaming', prefix: '📽️', keyword: 'HBO' });
    else if (/巴哈/i.test(nodeName)) classifications.push({ type: 'streaming', prefix: '🎌', keyword: '巴哈' });
    else classifications.push({ type: 'streaming', prefix: '📺', keyword: 'Stream' });
  }

  // AI服务节点
  if (CONFIG.enableAI && REGEX_CACHE.aiService.test(nodeName)) {
    classifications.push({ type: 'ai', prefix: '🤖', keyword: 'AI' });
  }

  // IPLC专线
  if (REGEX_CACHE.premiumLine.test(nodeName)) {
    classifications.push({ type: 'premium', prefix: '⚡', keyword: 'Premium' });
  }

  // 家宽IP
  if (REGEX_CACHE.residential.test(nodeName)) {
    classifications.push({ type: 'residential', prefix: '🏠', keyword: 'Fam' });
  }

  // 原生IP
  if (REGEX_CACHE.nativeIP.test(nodeName)) {
    classifications.push({ type: 'native', prefix: '🔓', keyword: 'Native' });
  }

  return classifications;
}

// ====================================================================================================
// 核心处理函数
// ====================================================================================================

let GetK = false;
let AMK = [];

/**
 * 构建国家映射表 - 使用Map优化查找性能
 * @param {object} allMap 国家映射对象
 */
function ObjKA(allMap) {
  GetK = true;
  AMK = Object.entries(allMap);
}

/**
 * 获取指定格式的国家列表
 * @param {string} arg 格式参数: us/gq/quan/cn
 * @returns {Array} 国家列表数组
 */
function getList(arg) {
  switch (arg) {
    case 'us': return EN;
    case 'gq': return FG;
    case 'quan': return QC;
    default: return ZH;
  }
}

/**
 * 主处理函数 - 节点重命名核心逻辑
 * @param {Array} proxies 节点数组
 * @returns {Array} 处理后的节点数组
 */
function operator(proxies) {
  try {
    const Allmap = {};
    const outList = getList(outputName);
    let inputList;
    let retainKey = "";

    // 确定输入格式列表
    if (inname !== "") {
      inputList = [getList(inname)];
    } else {
      inputList = [ZH, FG, QC, EN];
    }

    // 构建国家映射表
    inputList.forEach((arr) => {
      arr.forEach((value, valueIndex) => {
        Allmap[value] = outList[valueIndex];
      });
    });

    // ===== 第一步: 过滤不需要的节点 =====
    if (CONFIG.clear || CONFIG.nx || CONFIG.blnx || CONFIG.key) {
      proxies = proxies.filter((res) => {
        const resname = res.name;
        const shouldKeep =
          !(CONFIG.clear && REGEX_CACHE.nameClear.test(resname)) &&
          !(CONFIG.nx && REGEX_CACHE.namenx.test(resname)) &&
          !(CONFIG.blnx && !REGEX_CACHE.nameblnx.test(resname)) &&
          !(CONFIG.key && !(REGEX_CACHE.keya.test(resname) && /2|4|6|7/i.test(resname)));
        return shouldKeep;
      });
    }

    const BLKEYS = CUSTOM.BLKEY ? CUSTOM.BLKEY.split("+") : "";

    // ===== 第二步: 处理每个节点 =====
    proxies.forEach((e) => {
      let bktf = false;
      const ens = e.name;

      // 预处理: 地区名称规范化
      Object.keys(rurekey).forEach((ikey) => {
        if (rurekey[ikey].test(e.name)) {
          e.name = e.name.replace(rurekey[ikey], ikey);

          // 处理自定义保留关键词
          if (CUSTOM.BLKEY) {
            bktf = true;
            let BLKEY_REPLACE = "";
            let re = false;

            BLKEYS.forEach((i) => {
              if (i.includes(">") && ens.includes(i.split(">")[0])) {
                if (rurekey[ikey].test(i.split(">")[0])) {
                  e.name += " " + i.split(">")[0];
                }
                if (i.split(">")[1]) {
                  BLKEY_REPLACE = i.split(">")[1];
                  re = true;
                }
              } else {
                if (ens.includes(i)) {
                  e.name += " " + i;
                }
              }
              retainKey = re ? BLKEY_REPLACE : BLKEYS.filter((items) => e.name.includes(items));
            });
          }
        }
      });

      // 处理 block-quic 设置
      if (CUSTOM.blockquic === "on") {
        e["block-quic"] = true;
      } else if (CUSTOM.blockquic === "off") {
        e["block-quic"] = false;
      } else {
        delete e["block-quic"];
      }

      // 处理未匹配的自定义关键词
      if (!bktf && CUSTOM.BLKEY) {
        let BLKEY_REPLACE = "";
        let re = false;

        BLKEYS.forEach((i) => {
          if (i.includes(">") && e.name.includes(i.split(">")[0])) {
            if (i.split(">")[1]) {
              BLKEY_REPLACE = i.split(">")[1];
              re = true;
            }
          }
        });
        retainKey = re ? BLKEY_REPLACE : BLKEYS.filter((items) => e.name.includes(items));
      }

      let ikey = "";
      let ikeys = "";

      // 保留固定格式标识
      if (CONFIG.blgd) {
        regexArray.forEach((regex, index) => {
          if (regex.test(e.name)) {
            ikeys = valueArray[index];
          }
        });
      }

      // 正则匹配倍率
      if (CONFIG.bl) {
        const match = e.name.match(REGEX_CACHE.multiplier);
        if (match) {
          const rev = match[0].match(REGEX_CACHE.extractMultiplier)[0];
          if (rev !== "1") {
            ikey = rev + "×";
          }
        }
      }

      // v2.0: 智能分类
      let categoryTags = [];
      if (CONFIG.enableCategory) {
        const classifications = classifyNode(e.name);
        categoryTags = classifications.map(c => c.keyword);
      }

      // 构建国家映射表(懒加载)
      !GetK && ObjKA(Allmap);

      // 匹配国家/地区
      const findKey = AMK.find(([key]) => e.name.includes(key));

      let firstName = "";
      let nNames = "";

      // 处理机场名前缀位置
      if (CONFIG.nf) {
        firstName = CUSTOM.FNAME;
      } else {
        nNames = CUSTOM.FNAME;
      }

      if (findKey?.[1]) {
        const findKeyValue = findKey[1];
        let keyover = [];
        let usflag = "";

        // 添加国旗
        if (CONFIG.addflag) {
          const index = outList.indexOf(findKeyValue);
          if (index !== -1) {
            usflag = FG[index];
            // 特殊处理: 台湾显示中国国旗的情况
            usflag = usflag === "🇹🇼" ? "🇨🇳" : usflag;
          }
        }

        // 组装最终节点名
        keyover = keyover
          .concat(firstName, usflag, nNames, findKeyValue, retainKey, ikey, ikeys, categoryTags)
          .filter((k) => k !== "");

        e.name = keyover.join(SEPARATORS.FGF);
      } else {
        // 未匹配到国家的节点处理
        if (CONFIG.nm) {
          e.name = CUSTOM.FNAME + SEPARATORS.FGF + e.name;
        } else {
          e.name = null;
        }
      }
    });

    // 移除null节点
    proxies = proxies.filter((e) => e.name !== null);

    // ===== 第三步: 添加序号 =====
    addSequenceNumbers(proxies);

    // ===== 第四步: 清理单节点序号 =====
    CONFIG.numone && removeSingleNodeSequence(proxies);

    // ===== 第五步: 特殊排序 =====
    CONFIG.blpx && (proxies = sortBySpecialFlags(proxies));

    // ===== 第六步: 二次过滤(关键词模式) =====
    CONFIG.key && (proxies = proxies.filter((e) => !REGEX_CACHE.keyb.test(e.name)));

    return proxies;

  } catch (error) {
    // 错误处理
    console.error("[Rename Script Error]", error);
    return proxies;
  }
}

/**
 * 添加序号 - 为重复节点名添加序号
 * @param {Array} proxies 节点数组
 * @returns {Array} 添加序号后的节点数组
 */
function addSequenceNumbers(proxies) {
  // 步骤1: 按节点名分组并计数
  const grouped = proxies.reduce((accumulator, proxy) => {
    const existingGroup = accumulator.find(item => item.name === proxy.name);

    if (existingGroup) {
      // 已存在该节点名，增加计数
      existingGroup.count++;
      existingGroup.items.push({
        ...proxy,
        name: `${proxy.name}${SEPARATORS.XHFGF}${existingGroup.count.toString().padStart(2, "0")}`
      });
    } else {
      // 新节点名，创建新分组
      accumulator.push({
        name: proxy.name,
        count: 1,
        items: [{
          ...proxy,
          name: `${proxy.name}${SEPARATORS.XHFGF}01`
        }]
      });
    }
    return accumulator;
  }, []);

  // 步骤2: 展平分组，兼容旧版JavaScript
  const flattened = typeof Array.prototype.flatMap === 'function'
    ? grouped.flatMap(group => group.items)
    : grouped.reduce((acc, group) => acc.concat(group.items), []);

  // 步骤3: 替换原数组内容
  proxies.splice(0, proxies.length, ...flattened);
  return proxies;
}

/**
 * 清理单节点序号 - 移除只有一个节点的地区的 "01" 后缀
 * @param {Array} proxies 节点数组
 * @returns {Array} 处理后的节点数组
 */
function removeSingleNodeSequence(proxies) {
  // 按基础名称(不含序号)分组
  const groups = proxies.reduce((acc, proxy) => {
    // 使用正则表达式移除末尾的分隔符和数字序号
    const escapedSeparator = SEPARATORS.XHFGF.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    const baseName = proxy.name.replace(new RegExp(escapedSeparator + "\\d+$"), "");

    if (!acc[baseName]) {
      acc[baseName] = [];
    }
    acc[baseName].push(proxy);
    return acc;
  }, {});

  // 遍历分组，如果某组只有一个节点，则移除其序号后缀
  for (const baseName in groups) {
    if (groups[baseName].length === 1) {
      const proxyToModify = groups[baseName][0];
      proxyToModify.name = baseName;
    }
  }

  return proxies;
}

/**
 * 特殊标识排序 - 将特殊节点(IPLC/倍率等)排序到后面
 * @param {Array} proxies 节点数组
 * @returns {Array} 排序后的节点数组
 */
function sortBySpecialFlags(proxies) {
  const specialRegex = [
    /(\d\.)?\d+×/,
    /IPLC|IEPL|CN2|GIA|Kern|Edge|Pro|Std|Exp|Biz|Fam|Game|Buy|Zx|LB|Netflix|Disney|HBO|AI/i
  ];

  const withSpecial = [];
  const withoutSpecial = [];

  // 分类
  for (const proxy of proxies) {
    const hasSpecial = specialRegex.some((regex) => regex.test(proxy.name));
    if (hasSpecial) {
      withSpecial.push(proxy);
    } else {
      withoutSpecial.push(proxy);
    }
  }

  // 特殊节点按标识类型排序
  const specialIndices = withSpecial.map((proxy) =>
    specialRegex.findIndex((regex) => regex.test(proxy.name))
  );

  withSpecial.sort((a, b) => {
    const indexA = specialIndices[withSpecial.indexOf(a)];
    const indexB = specialIndices[withSpecial.indexOf(b)];
    return indexA - indexB || a.name.localeCompare(b.name);
  });

  // 普通节点保持原顺序
  withoutSpecial.sort((a, b) => proxies.indexOf(a) - proxies.indexOf(b));

  // 普通节点在前，特殊节点在后
  return withoutSpecial.concat(withSpecial);
}

// ====================================================================================================
// 脚本入口
// ====================================================================================================

// 导出主处理函数
// Sub-Store 会调用 operator() 函数处理节点列表
